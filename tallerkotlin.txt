//fun main() {
  //  val morningNotification = 51
  //  val eveningNotification = 135
  //  printNotificationSummary(morningNotification)
  //  printNotificationSummary(eveningNotification)
//}

//fun printNotificationSummary(numberOfMessages: Int) {
  //  if (numberOfMessages < 100) {
    //    println("You have $numberOfMessages notifications.")
  //  } else {
    //    println("Your phone is blowing up! You have 99+ notifications.")
   // }
//}


//fun main() {
  //  val child = 5
  //  val adult = 28
   // val senior = 87
   // val isMonday = true
   // println("The movie ticket price for a person aged $child is \$${ticketPrice(child, isMonday)}.")
   // println("The movie ticket price for a person aged $adult is \$${ticketPrice(adult, isMonday)}.")
   // println("The movie ticket price for a person aged $senior is \$${ticketPrice(senior, isMonday)}.")
//}

//fun ticketPrice(age: Int, isMonday: Boolean): Int {
  //  return when {
    //    age <= 12 -> 15
      //  age in 13..60 -> if (isMonday) 25 else 30
       /// age in 61..100 -> 20
       // else -> -1
   // }
//}

//fun main() {
  //  printFinalTemperature(27.0, "Celsius", "Fahrenheit") { c -> (c * 9/5) + 32 }
  //  printFinalTemperature(350.0, "Kelvin", "Celsius") { k -> k - 273.15 }
//    printFinalTemperature(10.0, "Fahrenheit", "Kelvin") { f -> (f - 32) * 5/9 + 273.15 }
//}

//fun printFinalTemperature(
  //  initialMeasurement: Double,
   // initialUnit: String,
  //  finalUnit: String,
  //  conversionFormula: (Double) -> Double
//) {
  //  val finalMeasurement = String.format("%.2f", conversionFormula(initialMeasurement))
  //  println("$initialMeasurement degrees $initialUnit is $finalMeasurement degrees $finalUnit.")
//}


//fun main() {
  //  val amanda = Person("Amanda", 33, "play tennis", null)
  //  val atiqah = Person("Atiqah", 28, "climb", amanda)
  //  amanda.showProfile()
  //  atiqah.showProfile()
//}

//class Person(val name: String, val age: Int, val hobby: String?, val referrer: Person?) {
  //  fun showProfile() {
    //    println("Name: $name")
  //      println("Age: $age")
//        println("Likes to ${hobby ?: "do nothing"}. ${referrerMessage()}")
//    }

 //   private fun referrerMessage(): String {
     //   return referrer?.let {
      //      "Has a referrer named ${it.name}, who likes to ${it.hobby}."
    //    } ?: "Doesn't have a referrer."
  //  }
//}


//class Phone(var isScreenLightOn: Boolean = false) {
  //  fun switchOn() {
  //      isScreenLightOn = true
//    }

    //fun switchOff() {
  //      isScreenLightOn = false
//    }

   // fun checkPhoneScreenLight() {
     //   val phoneScreenLight = if (isScreenLightOn) "on" else "off"
    //    println("The phone screen's light is $phoneScreenLight.")
  //  }
//}

//class FoldablePhone(var isFolded: Boolean, isScreenLightOn: Boolean = false) : Phone(isScreenLightOn) {
   // override fun switchOn() {
     //   if (!isFolded) {
    //        isScreenLightOn = true
  //      }
//    }

  //  fun fold() {
  //      isFolded = true
//    }

  //  fun unfold() {
    //    isFolded = false
  //  }
//}


//fun main() {
  //  val winningBid = Bid(5000, "Private Collector")
   // println("Item A is sold at ${auctionPrice(winningBid, 2000)}.")
  //  println("Item B is sold at ${auctionPrice(null, 3000)}.")
//}

//class Bid(val amount: Int, val bidder: String)

//fun auctionPrice(bid: Bid?, minimumPrice: Int): Int {
  //  return bid?.amount ?: minimumPrice
//}